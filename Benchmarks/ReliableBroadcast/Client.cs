//------------------------------------------------------------------------------
// <auto-generated>
// Well, not really. This is just a trick to get StyleCop off my back.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Coyote benchmark: TwoPhase Commit

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Coyote.Actors;
using Microsoft.Coyote.Actors.Timers;

namespace ReliableBroadcast;

/// <summary>
/// Mock implementation of a client that sends a specified number of requests to
/// the TwoPhaseCommit Coordinator.
/// Note: The current implementation of TwoPhaseCommit protocol
/// supports processing only a single client request
/// </summary>
[OnEventDoAction(typeof(GetMessagesResponseEvent), nameof(HandleResponse))]
public class Client : Actor
{
    public class SetupEvent : Event
    {
        internal readonly List<ActorId> Peers;
        internal readonly int NumBroadcasts;
        public TaskCompletionSource<bool> Finished;

        public SetupEvent(List<ActorId> peers, int numBroadcasts)
        {
            this.Peers = peers;
            this.NumBroadcasts = numBroadcasts;
            this.Finished = new TaskCompletionSource<bool>();
        }
    }

    public class DuplicateException : System.Exception
    {
        public DuplicateException() { }

        public DuplicateException(string message) : base(message)
        { }

        public DuplicateException(string message, System.Exception inner) : base(message, inner)
        { }

        protected DuplicateException(
            System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) : base(info, context) { }
    }

    public class MessageMatchException : System.Exception
    {
        public MessageMatchException() { }

        public MessageMatchException(string message) : base(message)
        { }

        public MessageMatchException(string message, System.Exception inner) : base(message, inner)
        { }

        protected MessageMatchException(
            System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) : base(info, context) { }
    }

    private SetupEvent ClientInfo;
    private int NumResponses;
    private List<List<string>> Responses = new List<List<string>>();

    protected override Task OnInitializeAsync(Event initialEvent)
    {
        var setup = initialEvent as SetupEvent;
        this.ClientInfo = setup;
        this.NumResponses = 0;

        var random = new Random();
        for (int i = 0; i < this.ClientInfo.NumBroadcasts; i++)
        {
            int index = random.Next(this.ClientInfo.Peers.Count);
            this.SendEvent(this.ClientInfo.Peers[index], new BroadcastRequestEvent() { Message = $"message-{i}" });
        }

        Thread.Sleep(100);

        foreach (var process in this.ClientInfo.Peers)
        {
            this.SendEvent(process, new GetMessagesEvent(this.Id));
        }

        return Task.CompletedTask;
    }

    private void HandleResponse(Event e)
    {
        var response = e as GetMessagesResponseEvent;

        if (response != null)
        {
            if (response.Messages.Count != response.Messages.Distinct().Count())
            {
                throw new DuplicateException();
            }

            this.Responses.Add(response.Messages);
            this.NumResponses++;

            if (this.NumResponses == this.ClientInfo.Peers.Count)
            {
                for (int i = 0; i < this.Responses.Count; i++)
                {
                    for (int j = i; j < this.Responses.Count; j++)
                    {
                        if (i != j)
                        {
                            List<string> onlyInFirstSet = this.Responses[i].Except(this.Responses[j]).ToList();
                            List<string> onlyInSecondSet = this.Responses[j].Except(this.Responses[i]).ToList();

                            if (onlyInFirstSet.Count > 0 || onlyInSecondSet.Count > 0)
                            {
                                this.Logger.WriteLine("First list");
                                foreach (var str in this.Responses[i])
                                {
                                    this.Logger.WriteLine(str);
                                }
                                this.Logger.WriteLine("------------");
                                this.Logger.WriteLine("Second list");
                                foreach (var str in this.Responses[j])
                                {
                                    this.Logger.WriteLine(str);
                                }
                                throw new MessageMatchException();
                            }
                        }
                    }
                }

                // Halt the client, as all responses have been received.
                this.RaiseHaltEvent();
                this.ClientInfo.Finished.SetResult(true);
            }
        }
    }
}
